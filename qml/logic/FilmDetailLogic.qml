import QtQuick 2.15
import Felgo 4.0
import "../model" as Model

/**
 * FilmDetailLogic - Controller MVC pour la page de d√©tails d'un film
 *
 * Responsabilit√©s :
 * - Charger les donn√©es d'un film depuis le mod√®le global (par ID)
 * - G√©rer les erreurs de chargement (film introuvable, ID invalide)
 * - Pr√©parer les donn√©es pour l'affichage dans la Vue (FilmDetailPage)
 * - Respecter le pattern MVC avec s√©paration strict View/Logic
 *
 * Pattern :
 * - H√©rite de QtObject (pas d'√©l√©ments visuels)
 * - Propri√©t√©s readonly pour exposition publique
 * - Propri√©t√©s priv√©es (_) pour √©tat interne
 * - Signaux pour communication avec la Vue
 * - M√©thodes publiques pour API logique
 * - M√©thodes priv√©es (_) pour orchestration interne
 */
QtObject {
    id: filmDetailLogic

    // ============================================
    // PROPRI√âT√âS PUBLIQUES - Interface pour la Vue
    // ============================================

    /**
     * Film actuellement charg√©
     * Readonly : expos√© pour bindings dans la Vue
     * Mis √† jour via signal filmLoaded ou interne _currentFilm
     */
    readonly property var currentFilm: _currentFilm

    /**
     * Indicateur de chargement
     * True pendant la recherche du film
     * Readonly : pour UI r√©active (BusyIndicator, etc.)
     */
    readonly property bool loading: _loading

    /**
     * Message d'erreur en cas de probl√®me
     * Readonly : expos√© pour affichage ou logs
     * Vide si pas d'erreur
     */
    readonly property string errorMessage: _errorMessage

    // ============================================
    // SIGNAUX - Communication avec la Vue
    // ============================================

    /**
     * Signal √©mis quand le film est charg√© avec succ√®s
     * Utilis√© par FilmDetailPage pour affichage (toast succ√®s)
     *
     * Param√®tre : film (object) - Les donn√©es compl√®tes du film
     */
    signal filmLoaded(var film)

    /**
     * Signal √©mis en cas d'erreur de chargement
     * Utilis√© par FilmDetailPage pour affichage (toast erreur)
     *
     * Param√®tre : message (string) - Description de l'erreur
     */
    signal loadError(string message)

    // ============================================
    // PROPRI√âT√âS PRIV√âES - √âtat interne
    // ============================================

    /**
     * Film en cours de traitement (interne)
     * Convention _ = private, non accessible de l'ext√©rieur
     */
    property var _currentFilm: null

    /**
     * √âtat de chargement (interne)
     * Convention _ = private
     */
    property bool _loading: false

    /**
     * Message d'erreur (interne)
     * Convention _ = private
     */
    property string _errorMessage: ""

    // ============================================
    // M√âTHODES PUBLIQUES - API de la Logic
    // ============================================

    /**
     * Charge les donn√©es d'un film depuis le mod√®le global
     *
     * Algorithme :
     * 1. Validation de l'ID (doit √™tre > 0)
     * 2. Acc√®s au FilmDataSingletonModel
     * 3. Recherche lin√©aire du film par ID (O(n), acceptable pour <1000 films)
     * 4. Mise √† jour de l'√©tat ou gestion d'erreur
     * 5. √âmission du signal appropri√©
     *
     * @param {int} filmId - ID du film √† charger
     *
     * Comportement :
     * - Si succ√®s : √©met filmLoaded(film)
     * - Si erreur : √©met loadError(message) + mise √† jour errorMessage
     */
    function loadFilm(filmId) {
        console.log("=== DEBUG FilmDetailLogic.loadFilm ===")
        console.log("üîç Chargement du film ID:", filmId)

        // PHASE 1 : VALIDATION DE L'ID
        if (filmId <= 0) {
            var invalidIdMsg = "ID de film invalide\n\nL'ID du film doit √™tre un nombre positif."
            console.error("‚ùå ID invalide:", filmId)

            _handleError(invalidIdMsg)
            return
        }

        // PHASE 2 : ACC√àS AU MOD√àLE GLOBAL
        _loading = true
        _errorMessage = ""

        var films = Model.FilmDataSingletonModel.films

        // V√©rification : catalogue vide
        if (!films || films.length === 0) {
            var emptyCatalogMsg = "Catalogue vide\n\nAucun film n'est disponible dans le catalogue."
            console.warn("‚ö†Ô∏è Catalogue vide lors du chargement du film ID:", filmId)

            _handleError(emptyCatalogMsg)
            return
        }

        console.log("üìä Catalogue disponible:", films.length, "films")

        // PHASE 3 : RECHERCHE DU FILM PAR ID
        var film = _findFilmById(filmId, films)

        if (film) {
            // ‚úÖ FILM TROUV√â
            _currentFilm = film
            _errorMessage = ""
            _loading = false

            console.log("‚úÖ Film trouv√©:")
            console.log("   - Titre:", _currentFilm.title)
            console.log("   - ID:", _currentFilm.id)
            console.log("   - Poster:", _currentFilm.poster_url ? "disponible" : "manquant")

            filmLoaded(_currentFilm)
        } else {
            // ‚ùå PHASE 4 : FILM NON TROUV√â
            var notFoundMsg = "Film introuvable\n\nLe film avec l'ID " + filmId + " n'existe pas dans le catalogue."
            console.error("‚ùå Film non trouv√© avec ID:", filmId)

            var availableIds = films.map(function(f) { return f.id }).join(", ")
            console.error("   IDs disponibles:", availableIds)

            _handleError(notFoundMsg)
        }
    }

    /**
     * R√©initialise l'√©tat de la Logic
     *
     * Appel√© avant destruction de la page ou pour nettoyer apr√®s une erreur
     * Utilis√© dans FilmDetailPage.leftBarItem.onClicked
     */
    function reset() {
        console.log("üîÑ Reset FilmDetailLogic")
        _currentFilm = null
        _errorMessage = ""
        _loading = false
    }

    // ============================================
    // M√âTHODES PRIV√âES - Orchestration interne
    // ============================================

    /**
     * Recherche un film par ID dans la liste
     *
     * Algorithme : Recherche lin√©aire (O(n))
     * - Acceptable pour < 1000 films
     * - Si perf probl√®me : penser √† impl√©menter Map/Index dans Model
     *
     * @param {int} filmId - ID √† rechercher
     * @param {array} films - Liste de films
     * @return {object} Film trouv√© ou null
     */
    function _findFilmById(filmId, films) {
        for (var i = 0; i < films.length; i++) {
            if (films[i].id === filmId) {
                return films[i]
            }
        }
        return null
    }

    /**
     * Gestion centralis√©e des erreurs
     *
     * Responsabilit√©s :
     * - Mise √† jour de l'√©tat interne
     * - Logging structured
     * - √âmission du signal
     *
     * @param {string} message - Message d'erreur
     */
    function _handleError(message) {
        _currentFilm = null
        _errorMessage = message
        _loading = false
        loadError(message)
    }
}
