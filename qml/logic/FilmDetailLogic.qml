import QtQuick 2.15
import Felgo 4.0
import "../model" as Model

/**
 * FilmDetailLogic - Logique m√©tier pour la page de d√©tails d'un film
 *
 * Responsabilit√©s :
 * - Charger les donn√©es d'un film depuis le mod√®le global (par ID)
 * - G√©rer les erreurs de chargement (film introuvable, ID invalide)
 * - Pr√©parer les donn√©es pour l'affichage dans la Vue

 * Respect du pattern MVC
 * - Controller/Logic : Orchestre entre Model (FilmDataSingletonModel) et View (FilmDetailPage)
 * - √âmet des signaux pour communication avec la Vue
 */
QtObject {
    id: filmDetailLogic

    // ============================================
    // PROPRI√âT√âS PUBLIQUES - Interface pour la Vue
    // ============================================

    // Film actuellement charg√©
    property var currentFilm: null

    // Indicateur de chargement
    property bool loading: false

    // Message d'erreur
    property string errorMessage: ""

    // ============================================
    // SIGNAUX - Communication avec la Vue
    // ============================================

    // ignal √©mis quand le film est charg√© avec succ√®s
    signal filmLoaded(var film)

    // Signal √©mis en cas d'erreur de chargement
    signal loadError(string message)

    // ============================================
    // M√âTHODES PUBLIQUES - API de la Logic
    // ============================================

    /**
     * Charge les donn√©es d'un film depuis le mod√®le global
     *
     * Algorithme :
     * 1. Validation de l'ID (doit √™tre > 0)
     * 2. V√©rification du catalogue (pas vide)
     * 3. Recherche lin√©aire du film par ID (O(n), acceptable pour <1000 films)
     * 4. Mise √† jour de currentFilm ou errorMessage
     * 5. √âmission du signal appropri√© (filmLoaded ou loadError)
     *
     * Param√®tres :
     * - filmId (int) : ID du film √† charger
     *
     * Retour : void (r√©sultat via propri√©t√©s et signaux)
     */
    function loadFilm(filmId) {
        console.log("=== DEBUG FilmDetailLogic.loadFilm ===")
        console.log("üîç Chargement du film ID:", filmId)

        // PHASE 1 : VALIDATION DE L'ID
        if (filmId <= 0) {
            var invalidIdMsg = "ID de film invalide\n\nL'ID du film doit √™tre un nombre positif."
            console.error("‚ùå ID invalide:", filmId)

            // Mise √† jour de l'√©tat
            currentFilm = null
            errorMessage = invalidIdMsg
            loading = false

            // √âmission du signal d'erreur
            loadError(invalidIdMsg)
            return
        }

        // PHASE 2 : ACC√àS AU MOD√àLE GLOBAL
        loading = true
        errorMessage = ""

        var films = Model.FilmDataSingletonModel.films

        // V√©rification : catalogue vide
        if (!films || films.length === 0) {
            var emptyCatalogMsg = "Catalogue vide\n\nAucun film n'est disponible dans le catalogue."
            console.warn("‚ö†Ô∏è Catalogue vide lors du chargement du film ID:", filmId)

            // Mise √† jour de l'√©tat
            currentFilm = null
            errorMessage = emptyCatalogMsg
            loading = false

            // √âmission du signal d'erreur
            loadError(emptyCatalogMsg)
            return
        }

        console.log("üìä Catalogue disponible:", films.length, "films")

        // PHASE 3 : RECHERCHE DU FILM PAR ID
        for (var i = 0; i < films.length; i++) {
            if (films[i].id === filmId) {
                // ‚úÖ FILM TROUV√â
                currentFilm = films[i]
                errorMessage = ""
                loading = false

                console.log("‚úÖ Film trouv√©:")
                console.log("   - Titre:", currentFilm.title)
                console.log("   - ID:", currentFilm.id)
                console.log("   - Poster:", currentFilm.poster_url ? "disponible" : "manquant")

                // √âmission du signal de succ√®s
                filmLoaded(currentFilm)
                return
            }
        }

        // PHASE 4 : FILM NON TROUV√â
        var notFoundMsg = "Film introuvable\n\nLe film avec l'ID " + filmId + " n'existe pas dans le catalogue."
        console.error("‚ùå Film non trouv√© avec ID:", filmId)

        // Log des IDs disponibles pour debugging
        var availableIds = films.map(function(f) { return f.id }).join(", ")
        console.error("   IDs disponibles:", availableIds)

        // Mise √† jour de l'√©tat
        currentFilm = null
        errorMessage = notFoundMsg
        loading = false

        // √âmission du signal d'erreur
        loadError(notFoundMsg)
    }

    /**
     * R√©initialise l'√©tat de la Logic
     *
     * Usage : Appel√© quand on quitte la page de d√©tails pour nettoyer l'√©tat
     */
    function reset() {
        console.log("üîÑ Reset FilmDetailLogic")
        currentFilm = null
        errorMessage = ""
        loading = false
    }
}
